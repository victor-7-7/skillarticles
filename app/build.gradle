apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
//apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-android-extensions' // this gradle plugin is deprecated
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'scabbard.gradle'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

apply from: '../versions.gradle'

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "ru.skillbranch.skillarticles"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        // https://github.com/tmurakami/dexopener
        // provide the ability to mock your final classes
        testInstrumentationRunner "ru.skillbranch.skillarticles.CustomTestRunner"

//        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'

// https://stackoverflow.com/questions/57670510/how-to-get-rid-of-incremental-annotation-processing-requested-warning
        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
                arg("room.incremental", "true")
                arg("room.expandProjection", "true")
            }
        }
        // look at video (lecture 11, time code 01:56:16)
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString(),
                              "room.incremental"   : "true"]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        viewBinding true
        dataBinding true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    // Блок касается плагина kotlin-android-extensions
    androidExtensions {
        experimental = true
    }
    testOptions {
//        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests.returnDefaultValues = true
    }
}

// https://arunkumar9t2.github.io/scabbard/configuration/
scabbard {
    enabled = true
    failOnError = true
    outputFormat "svg" // default png
    // fullBindingGraphValidation = true // default false
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Core
    // jdk? https://medium.com/@mbonnin/the-different-kotlin-stdlibs-explained-83d7c6bf293
    // Warning: Plugin version (1.5.10) is not the same as library version (1.5.0)
    // https://github.com/CymChad/BaseRecyclerViewAdapterHelper/issues/3346
//    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.appcompat:appcompat:$app_compat_vers"
    implementation "androidx.core:core-ktx:$core_ktx_vers"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_vers"

    implementation "androidx.fragment:fragment-ktx:$fragment_version"

    // Material
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.preference:preference-ktx:$pref_ktx_version"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swiperefreshlayout_vers"

    // Lifecycle, ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    // https://proandroiddev.com/livedata-transformations-4f120ac046fc
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    // The APIs in lifecycle-extensions have been deprecated. Instead,
    // add dependencies for the specific Lifecycle artifacts you need
    // implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"

    // Paging
    implementation "androidx.paging:paging-runtime-ktx:$paging_version"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_versions"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_versions"

    // Room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"

    // Okhttp3
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    // Для создания moshi-адаптеров при помощи кодогенерации, а не
    // при помощи рефлексии (по дефолту). Так дешевле
    kapt("com.squareup.moshi:moshi-kotlin-codegen:$moshi_version")

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"

    // RxJava
    implementation "io.reactivex.rxjava3:rxjava:3.0.5"
    implementation "io.reactivex.rxjava3:rxandroid:3.0.0"
    implementation "io.reactivex.rxjava3:rxkotlin:3.0.0"

    // Activity/Fragment result api
    implementation "androidx.activity:activity-ktx:$activity_ktx_vers"
    implementation "androidx.fragment:fragment-ktx:$fragment_ktx_vers"

    // Lottie
    implementation "com.airbnb.android:lottie:3.4.2"

    // Dagger
    implementation "com.google.dagger:dagger:$dagger_vers"
    kapt "com.google.dagger:dagger-compiler:$dagger_vers"
    // lecture 14, t.c. 02:14:00
    compileOnly "com.squareup.inject:assisted-inject-annotations-dagger2:0.6.0"
    kapt "com.squareup.inject:assisted-inject-processor-dagger2:0.6.0"

    // Hilt (lecture 14, t.c. 02:42:52)
    implementation "com.google.dagger:hilt-android:$hilt_vers"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_vers"
    // Для новых версий хилта эти зависимости не требуются
    // https://stackoverflow.com/questions/67256565/defaultactivityviewmodelfactory-not-found
    // https://stackoverflow.com/questions/67046457/cannot-find-symbol-return-daggerapplication-hiltcomponents-singletonc-builder
    // https://github.com/google/dagger/issues/2541
    // The DefaultActivityViewModelFactory was removed in Dagger 2.34.
    // It was previously used with the androidx.hilt library for @ViewModelInject
    // which was deprecated in androidx.hilt 1.0.0-alpha03 and removed
    // in androidx.hilt 1.0.0-beta01. View model injection is now supported
    // natively in Hilt via @HiltViewModel.
//    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$hilt_vm_vers"
    kapt "androidx.hilt:hilt-compiler:$hilt_vm_vers"

    // Начав использовать андроидный даггер, нижеследующие 2 библиотеки не нужны
    // lecture 14, t.c. 02:24:49
//    implementation "com.google.dagger:dagger-android-support:$dagger_vers"
    // If you use the support libraries
//    kapt "com.google.dagger:dagger-android-processor:$dagger_vers"


    // Legacy
     implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    // Test
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation "org.mockito:mockito-core:3.3.3"
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.25.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.3.0'
    androidTestImplementation 'androidx.test:core:1.3.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'com.jraska.livedata:testing-ktx:1.1.2'
    androidTestImplementation "android.arch.core:core-testing:1.1.1"

    androidTestImplementation 'com.github.tmurakami:dexopener:2.0.5'
    androidTestImplementation("com.squareup.okhttp3:mockwebserver:$okhttp_version")

    // https://developer.android.com/guide/fragments/test
    debugImplementation "androidx.fragment:fragment-testing:$fragment_version"
}
